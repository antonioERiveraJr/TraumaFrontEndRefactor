import { usePatientStore } from '../store/injury/PatientStore';
import { ref, watch } from 'vue';
import LibraryService from '../service/LibraryService';
// import { filter } from 'lodash';

// autoGeneratedObjSubjDiag.js
export function autoGeneratedObjSubjDiag() {
    const patientStore = usePatientStore();
    const libraryService = new LibraryService();
    const vehicleCodes = ref([]);
    const landVehicles = libraryService.getLandVehicles();
    const airVehicles = libraryService.getAirVehicles();
    const waterVehicles = libraryService.getWaterVehicles();
    const compiledOtherExternal = ref();
    const compiledOtherPhysical = ref();
    const generatedText = ref('');
    // Function to load vehicle types based on vehicle type ID
    const loadVehicles = (vehicle_type_id) => {
        switch (vehicle_type_id) {
            case '01':
                vehicleCodes.value = landVehicles; // Load land vehicles
                break;
            case '02':
                vehicleCodes.value = waterVehicles; // Load water vehicles
                break;
            case '03':
                vehicleCodes.value = airVehicles; // Load air vehicles
                break;
            default:
                vehicleCodes.value = []; // No vehicles
                break;
        }
    };

    // Function to generate diagnosis text based on patient details/ticked fields
    const generateText = () => {
        try {
            // console.log('genereating');
            const selectedBurnDegree = ref(0);
            if (patientStore.details.natureOfInjury.degree_burn1 === 'Y') {
                selectedBurnDegree.value = '(Degree Level I)';
            } else if (patientStore.details.natureOfInjury.degree_burn2 === 'Y') {
                selectedBurnDegree.value = '(Degree Level II)';
            } else if (patientStore.details.natureOfInjury.degree_burn3 === 'Y') {
                selectedBurnDegree.value = '(Degree Level III)';
            } else if (patientStore.details.natureOfInjury.degree_burn4 === 'Y') {
                selectedBurnDegree.value = '(Degree Level IV)';
            }
            const physicalInjuries = [];
            const externalCauses = [];
            const specifyDetails = [];
            const isMultiple = ref(0);
            const specifyExternalDetails = [];
            const triggerMultiplePhysicalInjury = ref(0);
            const storeOtherPhysical = [];
            const storeOtherExternal = [];
            if (patientStore.details.natureOfInjury.noi_abrasion === 'Y') {
                if (patientStore.details.multipleFields.abrasion) {
                    physicalInjuries.push('Multiple Abrasion');
                    isMultiple.value++;
                } else {
                    physicalInjuries.push('Abrasion');
                }
                triggerMultiplePhysicalInjury.value++;

                if (patientStore.details.natureOfInjury.noi_abradtl) {
                    if (patientStore.details.multipleFields.multiple_abrasion) {
                        specifyDetails.push(`Multiple Abrasion: ${patientStore.details.natureOfInjury.noi_abradtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Abrasion: ${patientStore.details.natureOfInjury.noi_abradtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_burn_r === 'Y') {
                physicalInjuries.push('Burn');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_burndtl) {
                    if (patientStore.details.multipleFields.multiple_burn) {
                        specifyDetails.push(`Multiple Burn${selectedBurnDegree.value}: ${patientStore.details.natureOfInjury.noi_burndtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Burn${selectedBurnDegree.value}: ${patientStore.details.natureOfInjury.noi_burndtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_avulsion === 'Y') {
                physicalInjuries.push('Avulsion');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_avuldtl) {
                    if (patientStore.details.multipleFields.multiple_avulsion) {
                        specifyDetails.push(`Multiple Avulsion: ${patientStore.details.natureOfInjury.noi_avuldtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Avulsion: ${patientStore.details.natureOfInjury.noi_avuldtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_owound === 'Y') {
                physicalInjuries.push('Laceration');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_owoudtl) {
                    if (patientStore.details.multipleFields.multiple_laceration) {
                        specifyDetails.push(`Multiple Laceration: ${patientStore.details.natureOfInjury.noi_owoudtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Laceration: ${patientStore.details.natureOfInjury.noi_owoudtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_incision === 'Y') {
                physicalInjuries.push('incision');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_incision_sp) {
                    storeOtherPhysical.push(`Incision: ${patientStore.details.natureOfInjury.noi_incision_sp}\n`);
                    if (patientStore.details.multipleFields.multiple_incision) {
                        specifyDetails.push(`Multiple incision: ${patientStore.details.natureOfInjury.noi_incision_sp}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`incision: ${patientStore.details.natureOfInjury.noi_incision_sp}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_amp === 'Y') {
                physicalInjuries.push('Traumatic Amputation');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_ampdtl) {
                    if (patientStore.details.multipleFields.multiple_traumatic_amputation) {
                        specifyDetails.push(`Multiple Traumatic Amputation: ${patientStore.details.natureOfInjury.noi_ampdtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Traumatic Amputation: ${patientStore.details.natureOfInjury.noi_ampdtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_brain === 'Y') {
                physicalInjuries.push('Traumatic Brain Injury(' + patientStore.details.natureOfInjury.noi_braindtl + ')');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_braindtl) {
                    let brainStageDesc = '';
                    switch (patientStore.details.natureOfInjury.noi_brain_stg) {
                        case '1':
                            brainStageDesc = 'Mild';
                            break;
                        case '2':
                            brainStageDesc = 'Moderate';
                            break;
                        case '3':
                            brainStageDesc = 'Severe';
                            break;
                    }
                    storeOtherPhysical.push(`Traumatic Brain Injury(${brainStageDesc}): ${patientStore.details.natureOfInjury.noi_braindtl}\n`);
                    if (patientStore.details.multipleFields.multiple_traumatic_brain) {
                        specifyDetails.push(`Multiple Traumatic Brain Injury(${brainStageDesc}): ${patientStore.details.natureOfInjury.noi_braindtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Traumatic Brain Injury(${brainStageDesc}): ${patientStore.details.natureOfInjury.noi_braindtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_gunshot === 'Y') {
                physicalInjuries.push('Gunshot Wound');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_gunshotdtl) {
                    storeOtherPhysical.push(`Gunshot Wound: ${patientStore.details.natureOfInjury.noi_gunshotdtl}\n`);
                    if (patientStore.details.multipleFields.multiple_gunshot) {
                        specifyDetails.push(`Multiple Gunshot Wound: ${patientStore.details.natureOfInjury.noi_gunshotdtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Gunshot Wound: ${patientStore.details.natureOfInjury.noi_gunshotdtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_stab_wound === 'Y') {
                physicalInjuries.push('Stab Wound');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_stab_wounddtl) {
                    storeOtherPhysical.push(`Stab Wound: ${patientStore.details.natureOfInjury.noi_stab_wounddtl}\n`);
                    if (patientStore.details.multipleFields.multiple_stab) {
                        specifyDetails.push(`Multiple Stab Wound: ${patientStore.details.natureOfInjury.noi_stab_wounddtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Stab Wound: ${patientStore.details.natureOfInjury.noi_stab_wounddtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_concussion === 'Y') {
                physicalInjuries.push('Concussion');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_concussiondtl) {
                    if (patientStore.details.multipleFields.multiple_concussion) {
                        specifyDetails.push(`Multiple Concussion: ${patientStore.details.natureOfInjury.noi_concussiondtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Concussion: ${patientStore.details.natureOfInjury.noi_concussiondtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_contusion === 'Y') {
                physicalInjuries.push('Contusion');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_contudtl) {
                    if (patientStore.details.multipleFields.multiple_contusion) {
                        specifyDetails.push(`Multiple Contusion: ${patientStore.details.natureOfInjury.noi_contudtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Contusion: ${patientStore.details.natureOfInjury.noi_contudtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_frac_ope === 'Y') {
                physicalInjuries.push('Fracture (Closed)');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_fropdtl) {
                    if (patientStore.details.multipleFields.multiple_fracture_closed) {
                        specifyDetails.push(`Multiple Fracture (Closed): ${patientStore.details.natureOfInjury.noi_fropdtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Fracture (Closed): ${patientStore.details.natureOfInjury.noi_fropdtl}\n`);
                    }
                }
            }

            if (patientStore.details.natureOfInjury.noi_frac_clo === 'Y') {
                physicalInjuries.push('Fracture (Open)');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_frcldtl) {
                    if (patientStore.details.multipleFields.multiple_fracture_open) {
                        specifyDetails.push(`Multiple Fracture (Open): ${patientStore.details.natureOfInjury.noi_frcldtl}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Fracture (Open): ${patientStore.details.natureOfInjury.noi_frcldtl}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_disl_open === 'Y') {
                physicalInjuries.push('Dislocation (Open)');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_disl_open_sp) {
                    storeOtherPhysical.push(`Dislocation (Open): ${patientStore.details.natureOfInjury.noi_disl_open_sp}\n`);
                    if (patientStore.details.multipleFields.multiple_dislocation_open) {
                        specifyDetails.push(`Multiple Dislocation (Open): ${patientStore.details.natureOfInjury.noi_disl_open_sp}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Dislocation (Open): ${patientStore.details.natureOfInjury.noi_disl_open_sp}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_disl_close === 'Y') {
                physicalInjuries.push('Dislocation (Close)');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_disl_close_sp) {
                    storeOtherPhysical.push(`Dislocation (Close): ${patientStore.details.natureOfInjury.noi_disl_close_sp}\n`);
                    if (patientStore.details.multipleFields.multiple_dislocation_closed) {
                        specifyDetails.push(`Multiple Dislocation (Close): ${patientStore.details.natureOfInjury.noi_disl_close_sp}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Dislocation (Close): ${patientStore.details.natureOfInjury.noi_disl_close_sp}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_punc === 'Y') {
                physicalInjuries.push('Puncture');
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_punc_sp) {
                    storeOtherPhysical.push(`Puncture: ${patientStore.details.natureOfInjury.noi_punc_sp}\n`);
                    if (patientStore.details.multipleFields.multiple_puncture) {
                        specifyDetails.push(`Multiple Puncture: ${patientStore.details.natureOfInjury.noi_punc_sp}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`Puncture: ${patientStore.details.natureOfInjury.noi_punc_sp}\n`);
                    }
                }
            }
            if (patientStore.details.natureOfInjury.noi_others === 'Y') {
                physicalInjuries.push(`${patientStore.details.natureOfInjury.noi_otherinj}`);
                triggerMultiplePhysicalInjury.value++;
                if (patientStore.details.natureOfInjury.noi_otherinj) {
                    if (patientStore.details.multipleFields.multiple_other) {
                        specifyDetails.push(`Multiple ${patientStore.details.natureOfInjury.noi_otherinj}\n`);
                        isMultiple.value++;
                    } else {
                        specifyDetails.push(`${patientStore.details.natureOfInjury.noi_otherinj}\n`);
                    }
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_bite === 'Y') {
                externalCauses.push(' Bite/Sting');
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_burn_r === 'Y') {
                const burnType = ref('');
                switch (patientStore.details.ExternalCauseOfInjury.ref_burn_code) {
                    case '01':
                        burnType.value = 'Heat';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '02':
                        burnType.value = 'Fire';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '03':
                        burnType.value = 'Electricity';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '04':
                        burnType.value = 'Oil';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '05':
                        burnType.value = 'Friction';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '06':
                        burnType.value = patientStore.details.ExternalCauseOfInjury.ext_burn_sp;
                        specifyExternalDetails.push(` ${patientStore.details.ExternalCauseOfInjury.ext_burn_sp}\n`);
                        externalCauses.push(burnType.value);
                        break;
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_burn_r_doctor === 'Y') {
                const burnType = ref('');
                switch (patientStore.details.ExternalCauseOfInjury.ref_burn_code_doctor) {
                    case '99':
                        burnType.value = 'Flame Burn';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '98':
                        burnType.value = 'Scald Burn';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '97':
                        burnType.value = 'Electrical Burn';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '96':
                        burnType.value = 'Flash Burn';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '95':
                        burnType.value = 'Chemical Burn';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '94':
                        burnType.value = 'Blast Injury';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '93':
                        burnType.value = 'Contact Burn';
                        specifyExternalDetails.push(`${burnType.value}\n`);
                        externalCauses.push(burnType.value);
                        break;
                    case '92':
                        burnType.value = patientStore.details.ExternalCauseOfInjury.ext_burn_sp_doctor;
                        specifyExternalDetails.push(` ${patientStore.details.ExternalCauseOfInjury.ext_burn_sp_doctor}\n`);
                        externalCauses.push(burnType.value);
                        break;
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_chem === 'Y') {
                externalCauses.push(' Chemical Substance');
                if (patientStore.details.ExternalCauseOfInjury.ext_chem_sp) {
                    specifyExternalDetails.push(`Chemical Substance: ${patientStore.details.ExternalCauseOfInjury.ext_chem_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_drown_r === 'Y') {
                externalCauses.push(' Drowning');
                if (patientStore.details.ExternalCauseOfInjury.ext_drown_sp || patientStore.details.ExternalCauseOfInjury.ref_drowning_cope) {
                    switch (patientStore.details.ExternalCauseOfInjury.ref_drowning_cope) {
                        case '01':
                            specifyExternalDetails.push(`Drowning: Sea\n`);
                            break;
                        case '02':
                            specifyExternalDetails.push(`Drowning: River\n`);
                            break;
                        case '03':
                            specifyExternalDetails.push(`Drowning: lake\n`);
                            break;
                        case '04':
                            specifyExternalDetails.push(`Drowning: Pool\n`);
                            break;
                        case '05':
                            specifyExternalDetails.push(`Drowning: Bathtub\n`);
                            break;
                        case '06':
                            specifyExternalDetails.push(`Drowning:${patientStore.details.ExternalCauseOfInjury.ext_drown_sp}\n`);
                            break;
                    }
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_expo_nature_r === 'Y') {
                externalCauses.push(' Exposure to Forces of Nature');
                if (patientStore.details.ExternalCauseOfInjury.ext_expo_nature_sp || patientStore.details.ExternalCauseOfInjury.ref_expnature_code) {
                    switch (patientStore.details.ExternalCauseOfInjury.ref_expnature_code) {
                        case '01':
                            specifyExternalDetails.push(`Exposure to Forces of Nature: Earthquake\n`);
                            break;
                        case '02':
                            specifyExternalDetails.push(`Exposure to Forces of Nature: Volcanic Eruption\n`);
                            break;
                        case '03':
                            specifyExternalDetails.push(`Exposure to Forces of Nature: Typhoon\n`);
                            break;
                        case '04':
                            specifyExternalDetails.push(`Exposure to Forces of Nature: Landslide\n`);
                            break;
                        case '05':
                            specifyExternalDetails.push(`Exposure to Forces of Nature: Tidal Wave\n`);
                            break;
                        case '06':
                            specifyExternalDetails.push(`Exposure to Forces of Nature: Flood\n`);
                            break;
                        case '07':
                            specifyExternalDetails.push(`Exposure to Forces of Nature: ${patientStore.details.ExternalCauseOfInjury.ext_expo_nature_sp}\n`);
                            break;
                    }
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_fall === 'Y') {
                externalCauses.push(' Fall');
                if (patientStore.details.ExternalCauseOfInjury.ext_falldtl) {
                    specifyExternalDetails.push(`Fall: ${patientStore.details.ExternalCauseOfInjury.ext_falldtl}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_firecracker_r === 'Y') {
                externalCauses.push(' Firecracker');
                if (patientStore.details.ExternalCauseOfInjury.ext_firecracker_sp || patientStore.details.ExternalCauseOfInjury.firecracker_code) {
                    switch (patientStore.details.ExternalCauseOfInjury.firecracker_code) {
                        case '01':
                            specifyExternalDetails.push(`Firecracker: Piccolo\n`);
                            break;
                        case '02':
                            specifyExternalDetails.push(`Firecracker: Kwitis\n`);
                            break;
                        case '03':
                            specifyExternalDetails.push(`Firecracker: 5-Star\n`);
                            break;
                        case '04':
                            specifyExternalDetails.push(`Firecracker: Home-made firecrackers\n`);
                            break;
                        case '88':
                            +specifyExternalDetails.push(`Firecracker: ${patientStore.details.ExternalCauseOfInjury.ext_firecracker_sp}\n`);
                            break;
                    }
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_foreign_body === 'Y') {
                externalCauses.push(' Foreign Body Ingestion');
                if (patientStore.details.ExternalCauseOfInjury.ext_foreign_body_sp) {
                    storeOtherExternal.push(`Foreign Body Ingestiony: ${patientStore.details.ExternalCauseOfInjury.ext_foreign_body_sp}`);
                    specifyExternalDetails.push(`Foreign Body Ingestion: ${patientStore.details.ExternalCauseOfInjury.ext_foreign_body_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_caustic_ingestion === 'Y') {
                externalCauses.push(' Caustic Ingestion');
                if (patientStore.details.ExternalCauseOfInjury.ext_caustic_ingestion_sp) {
                    storeOtherExternal.push(`Caustic Ingestion: ${patientStore.details.ExternalCauseOfInjury.ext_caustic_ingestion_sp}`);
                    specifyExternalDetails.push(`Caustic Ingestion: ${patientStore.details.ExternalCauseOfInjury.ext_caustic_ingestion_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_encavement === 'Y') {
                externalCauses.push(' Encavement');
                if (patientStore.details.ExternalCauseOfInjury.ext_encavement_sp) {
                    storeOtherExternal.push(`Encavement: ${patientStore.details.ExternalCauseOfInjury.ext_encavement_sp}`);
                    specifyExternalDetails.push(`Encavement: ${patientStore.details.ExternalCauseOfInjury.ext_encavement_sp}\n`);
                }
            }

            if (patientStore.details.ExternalCauseOfInjury.ext_crushing === 'Y') {
                externalCauses.push(' Crushing');
                if (patientStore.details.ExternalCauseOfInjury.ext_crushing_sp) {
                    storeOtherExternal.push(`Crushing: ${patientStore.details.ExternalCauseOfInjury.ext_crushing_sp}`);
                    specifyExternalDetails.push(`Crushing: ${patientStore.details.ExternalCauseOfInjury.ext_crushing_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_stab_wound === 'Y') {
                externalCauses.push(patientStore.details.ExternalCauseOfInjury.ext_stab_wound_sp);
                if (patientStore.details.ExternalCauseOfInjury.ext_stab_wound_sp) {
                    storeOtherExternal.push(`Stab Wound: ${patientStore.details.ExternalCauseOfInjury.ext_stab_wound_sp}`);
                    specifyExternalDetails.push(`Stab Wound: ${patientStore.details.ExternalCauseOfInjury.ext_stab_wound_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_sharp === 'Y') {
                externalCauses.push(' Contact with Sharp Object');
                if (patientStore.details.ExternalCauseOfInjury.ext_sharp_sp) {
                    specifyExternalDetails.push(`Contact with Sharp Object: ${patientStore.details.ExternalCauseOfInjury.ext_sharp_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.contact_blurt === 'Y') {
                externalCauses.push(' Contact with Blunt Object');
                if (patientStore.details.ExternalCauseOfInjury.contact_blurt_sp) {
                    storeOtherExternal.push(`Contact with Blunt Object: ${patientStore.details.ExternalCauseOfInjury.contact_blurt_sp}`);
                    specifyExternalDetails.push(`Contact with Blunt Object: ${patientStore.details.ExternalCauseOfInjury.contact_blurt_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_vape === 'Y') {
                externalCauses.push(' Vapor/HTD Product');
                if (patientStore.details.ExternalCauseOfInjury.ext_vape_sp) {
                    storeOtherExternal.push(`Vapor/HTD Product: ${patientStore.details.ExternalCauseOfInjury.ext_vape_sp}`);
                    specifyExternalDetails.push(`Vapor/HTD Product: ${patientStore.details.ExternalCauseOfInjury.ext_vape_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_gun === 'Y') {
                externalCauses.push(' Gunshot Wound');
                if (patientStore.details.ExternalCauseOfInjury.ext_gun_sp) {
                    storeOtherExternal.push(`Gunshot Wound: ${patientStore.details.ExternalCauseOfInjury.ext_gun_sp}`);
                    specifyExternalDetails.push(`Gunshot Wound: ${patientStore.details.ExternalCauseOfInjury.ext_gun_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_hang === 'Y') {
                externalCauses.push(' Hanging/Strangulation');
                if (patientStore.details.ExternalCauseOfInjury.ext_hang_sp) {
                    specifyExternalDetails.push(`Hanging/Strangulation: ${patientStore.details.ExternalCauseOfInjury.ext_hang_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_battery === 'Y') {
                externalCauses.push(' Battery');
                patientStore.details.generalData.perpetrator = 'Y';
                if (patientStore.details.generalData.perpetrator_sp) {
                    if (patientStore.details.generalData.perpetrator_sp === '11') {
                        specifyExternalDetails.push(`Battery: ${patientStore.details.generalData.perpetrator_oth_sp}\n`);
                    } else {
                        specifyExternalDetails.push(`Battery (Relationship to Perpetrator): ${libraryService.getPerpetratorRelationships().find((perpetrator) => perpetrator.value === patientStore.details.generalData.perpetrator_sp)?.label}\n`);
                    }
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_assault === 'Y') {
                externalCauses.push(' Assault');
                patientStore.details.generalData.perpetrator = 'Y';
                if (patientStore.details.generalData.perpetrator_sp) {
                    if (patientStore.details.generalData.perpetrator_sp === '11') {
                        specifyExternalDetails.push(`Assault: ${patientStore.details.generalData.perpetrator_oth_sp}\n`);
                    } else {
                        specifyExternalDetails.push(`Assault(Relationship to Perpetrator): ${libraryService.getPerpetratorRelationships().find((perpetrator) => perpetrator.value === patientStore.details.generalData.perpetrator_sp)?.label}\n`);
                    }
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_transport === 'Y') {
                externalCauses.push(' Road Crash Incident');
                const tally = {
                    '               Transport Type': libraryService.getVehicleTypes().find((type) => type.vehicle_type_id === patientStore.details.forTransportVehicularAccident.vehicle_type_id)?.vehicle_type_desc || 'Not specified',
                    '               Collision Type': libraryService.getCollisionTypes().find((type) => type.ref_veh_acctype_code === patientStore.details.forTransportVehicularAccident.ref_veh_acctype_code)?.ref_veh_acctype_desc || 'Not specified',
                    "               Vehicles Involved - Patient's Vehicle": vehicleCodes.value.find((vehicle) => vehicle.vehicle_code === patientStore.details.forTransportVehicularAccident.vehicle_code)?.vehicle_desc || 'Not specified',
                    "               Specify Patient's Vehicle": patientStore.details.forTransportVehicularAccident.vehicle_code === '88' ? patientStore.details.forTransportVehicularAccident.pat_veh_sp : undefined,
                    '               Vehicles Involved - Other Vehicle': vehicleCodes.value.find((vehicle) => vehicle.vehicle_code === patientStore.details.forTransportVehicularAccident.etc_veh)?.vehicle_desc || 'Not specified',
                    "               Specify Other's Vehicle": patientStore.details.forTransportVehicularAccident.etc_veh === '88' ? patientStore.details.forTransportVehicularAccident.etc_veh_sp : undefined,
                    '               Position of Patient in Vehicle': libraryService.getPositions().find((pos) => pos.position_code === patientStore.details.forTransportVehicularAccident.position_code)?.position_desc || 'Not specified',
                    '               Specify Position': patientStore.details.forTransportVehicularAccident.position_code === '88' ? patientStore.details.forTransportVehicularAccident.pos_pat_sp : undefined
                };
                const filteredTally = Object.fromEntries(
                    Object.entries(tally).filter(([key, value]) => {
                        return value !== undefined && value !== null && value !== '' && value !== 'Invalid date';
                    })
                );
                const testDetails = Object.keys(filteredTally)
                    .map((label) => `${label}: ${filteredTally[label]}`)
                    .join('\n');
                const trimDetails = 'Road Crash Incident:\n' + testDetails;
                specifyExternalDetails.push(trimDetails);
                patientStore.header.doctor_details = trimDetails + '\n' + patientStore?.details?.ExternalCauseOfInjury?.ext_history;
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_sexual === 'Y') {
                externalCauses.push(' Sexual Abuse.');
                patientStore.details.generalData.perpetrator = 'Y';
                if (patientStore.details.generalData.perpetrator_sp) {
                    if (patientStore.details.generalData.perpetrator_sp === '11') {
                        specifyExternalDetails.push(`SA ${patientStore.details.generalData.perpetrator_oth_sp}\n`);
                    } else {
                        specifyExternalDetails.push(`SA(Relationship to Perpetrator): ${libraryService.getPerpetratorRelationships().find((perpetrator) => perpetrator.value === patientStore.details.generalData.perpetrator_sp)?.label}\n`);
                    }
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_neglect === 'Y') {
                externalCauses.push(' Neglect.');
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_other === 'Y') {
                externalCauses.push(` ${patientStore.details.ExternalCauseOfInjury.ext_other_sp}`);
                if (patientStore.details.ExternalCauseOfInjury.ext_other_sp) {
                    specifyExternalDetails.push(`${patientStore.details.ExternalCauseOfInjury.ext_other_sp}\n`);
                }
            }
            if (patientStore.details.ExternalCauseOfInjury.vawc === 'Y') {
                physicalInjuries.push(' VAWC');
                if (patientStore.details.ExternalCauseOfInjury.vawc_impression && (patientStore.details.ExternalCauseOfInjury.ext_physical === 'Y' || patientStore.details.ExternalCauseOfInjury.ext_sexual === 'Y')) {
                    specifyExternalDetails.push(`VAWCs: ${patientStore.details.ExternalCauseOfInjury.vawc_impression}\n`);
                }
            }

            // Compile diagnosis based on collected data
            let compiledDiagnosis = '';
            const injuryText = physicalInjuries.join(',');
            const causeText = externalCauses.join(',');
            const diagSubj = specifyDetails.map((detail) => `- ${detail}`).join('');
            compiledOtherPhysical.value = storeOtherPhysical.join('');
            compiledOtherExternal.value = storeOtherExternal.join('');

            if (specifyDetails || specifyExternalDetails) {
                if (patientStore.details.natureOfInjury.noi_no_physical === 'Y') {
                    specifyDetails.push('No External Sign of Physical injury');
                    compiledDiagnosis = `${causeText}, No External Sign of Physical injury`;
                } else if (triggerMultiplePhysicalInjury.value > 1) {
                    compiledDiagnosis = `Multiple phyisical injuries secondary to ${causeText}  \n${diagSubj}`;
                } else if (Object.values(patientStore.details.multipleFields).some((value) => value === true) && isMultiple.value > 0) {
                    compiledDiagnosis = `Multiple ${injuryText}  secondary to ${causeText} \n${diagSubj} `;
                } else {
                    // Build the final diagnosis string
                    if (injuryText || causeText) {
                        compiledDiagnosis = `${injuryText} secondary to ${causeText}  \n${diagSubj}`;
                    }
                }
                patientStore.header.doctor_objective = specifyDetails.join('');

                patientStore.header.doctor_noi = externalCauses;
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_burn_r_doctor === 'Y') {
                compiledDiagnosis = `${externalCauses} \n ${specifyDetails}  \n`;
            }
            if (patientStore.details.ExternalCauseOfInjury.ext_bite === 'Y') {
                if (patientStore.details.ExternalCauseOfInjury.ext_bite_sp) {
                    compiledDiagnosis = `${patientStore.details.ExternalCauseOfInjury.ext_bite_sp} (Category ${patientStore.details.ExternalCauseOfInjury.dogbiteDegree}), ${specifyDetails}  \n`;
                    patientStore.header.doctor_objective = specifyDetails;
                    const tally = ref();
                    const tallyObjective = ref();
                    if (patientStore.progressionDay === '0' || patientStore.progressionDay === '') {
                        tally.value = {
                            '               Nature of Injurys': patientStore.details.ExternalCauseOfInjury.ext_bite_sp,
                            '               Bite Category': patientStore.details.ExternalCauseOfInjury.dogbiteDegree,
                            '               Bleeding of Injury': patientStore.details.ExternalCauseOfInjury.bleeding,
                            '               Biting Animal': patientStore.details.ExternalCauseOfInjury.bitingAnimal,
                            '               Biting Animal Can Be Observed': patientStore.details.ExternalCauseOfInjury.observation,
                            '               Washing of Wound Done': patientStore.details.ExternalCauseOfInjury.washingDone,
                            '               Applied Anything to Wound': patientStore.details.preAdmissionData.first_aid_code === 'Y' ? 'Yes' : patientStore.details.preAdmissionData.first_aid_code,
                            '               First Aid': patientStore.details.preAdmissionData.firstaid_others,
                            '               By Whom': patientStore.details.preAdmissionData.firstaid_others2,
                            '               Previous Completed ARV': patientStore.details.ExternalCauseOfInjury.previousARV,
                            '               Date of Previous ARV': patientStore.details.ExternalCauseOfInjury.arvDate,
                            '               Previous Anti-Tetanus Vaccination': patientStore.details.ExternalCauseOfInjury.tetanusVaccination,
                            '               # of Tetanus Doses Given': patientStore.details.ExternalCauseOfInjury.tetanusDoses,
                            '               Last Tetanus Dose Given': patientStore.details.ExternalCauseOfInjury.lastTetanusDose,
                            '               Allergies': patientStore.details.ExternalCauseOfInjury.allergies,
                            '               Adverse Reaction from Previous Vaccination': patientStore.details.ExternalCauseOfInjury.adverseReaction,
                            '               Other Pertinent': patientStore.details.ExternalCauseOfInjury.bite_more_details
                        };
                    } else {
                        tally.value = {
                            '               Nature of Injurys': patientStore.details.ExternalCauseOfInjury.ext_bite_sp,
                            '               Bite Category': patientStore.details.ExternalCauseOfInjury.dogbiteDegree,
                            '               Bleeding of Injury': patientStore.details.ExternalCauseOfInjury.bleeding,
                            '               Biting Animal': patientStore.details.ExternalCauseOfInjury.bitingAnimal,
                            '               Biting Animal Can Be Observed': patientStore.details.ExternalCauseOfInjury.observation,
                            '               Washing of Wound Done': patientStore.details.ExternalCauseOfInjury.washingDone,
                            '               Applied Anything to Wound': patientStore.details.preAdmissionData.first_aid_code === 'Y' ? 'Yes' : patientStore.details.preAdmissionData.first_aid_code,
                            '               First Aid': patientStore.details.preAdmissionData.firstaid_others,
                            '               By Whom': patientStore.details.preAdmissionData.firstaid_others2,
                            '               Previous Completed ARV': patientStore.details.ExternalCauseOfInjury.previousARV,
                            '               Date of Previous ARV': patientStore.details.ExternalCauseOfInjury.arvDate,
                            '               Previous Anti-Tetanus Vaccination': patientStore.details.ExternalCauseOfInjury.tetanusVaccination,
                            '               # of Tetanus Doses Given': patientStore.details.ExternalCauseOfInjury.tetanusDoses,
                            '               Last Tetanus Dose Given': patientStore.details.ExternalCauseOfInjury.lastTetanusDose,
                            '               Allergies': patientStore.details.ExternalCauseOfInjury.allergies,
                            '               Adverse Reaction from Previous Vaccination': patientStore.details.ExternalCauseOfInjury.adverseReaction,
                            '               Other Pertinent': patientStore.details.ExternalCauseOfInjury.bite_more_details,
                            '\n\nFollow-Up Day': patientStore.progressionDay,
                            '               Complaints': patientStore.details.followUp.complaints,
                            '               Adverse reaction from previous vaccination': patientStore.details.followUp.adverseReaction,
                            '               Biting': patientStore.details.followUp.biting,
                            '               Other Details': patientStore.details.followUp.others
                        };
                        tallyObjective.value = {
                            'Wound Description': patientStore?.details?.followUp?.wound_description,
                            Erythema: patientStore?.details?.followUp?.erythema,
                            Discharge: patientStore?.detail?.followUp?.discharge,
                            Tenderness: patientStore?.details?.followUp?.tenderness,
                            Hematoma: patientStore?.details?.followUp?.hematoma
                        };
                    }

                    const filteredTally = Object.fromEntries(
                        Object.entries(tally.value).filter(([key, value]) => {
                            return value !== undefined && value !== null && value !== '' && value !== 'Invalid date';
                        })
                    );

                    const testDetails = Object.keys(filteredTally)
                        .map((label) => `${label}: ${filteredTally[label]}`)
                        .join('\n');
                    const trimDetails = 'Bite/Sting:\n' + testDetails + '\n\n' + specifyExternalDetails.join('');

                    //findings
                    const tallyFindings = ref('');
                    if (patientStore.details.followUp.finding === 'WITH FINDINGS') {
                        tallyFindings.value = `With Findings: 
                        Wound Description: ${patientStore.details.followUp.wound_description}
                        (${patientStore.details.followUp.erythema})Erythema 
                        (${patientStore.details.followUp.tenderness})Tenderness
                        (${patientStore.details.followUp.hematoma})Hematoma 
                        (${patientStore.details.followUp.discharge})Discharge/Bleeding ${patientStore.details.followUp.discharge_sp}`;
                    }
                    // else if (patientStore.details.followUp.finding === 'ESSENTIALLY NORMAL PE FINDING') {
                    //     tallyFindings.value = 'Essentially normal physical examination finding';
                    // }

                    if (patientStore.progressionDay === '0' || patientStore.progressionDay === '') {
                        patientStore.header.doctor_objective = specifyDetails + '\n' + tallyFindings.value;
                    } else {
                        const filteredTallyObjective = Object.fromEntries(
                            Object.entries(tallyObjective.value).filter(([key, value]) => {
                                return value !== undefined && value !== null && value !== '' && value !== 'Invalid date';
                            })
                        );
                        const trimmedObjective = Object.keys(filteredTallyObjective)
                            .map((label) => `(${filteredTallyObjective[label]}) ${label}`)
                            .join('\n');
                        const trimObjective = '\n' + trimmedObjective + '\n\n' + specifyDetails;
                        patientStore.header.doctor_objective = trimObjective + '\n' + tallyFindings.value;
                    }

                    patientStore.header.doctor_details = trimDetails + '\n' + patientStore?.details?.ExternalCauseOfInjury?.ext_history;
                } else if (patientStore.details.ExternalCauseOfInjury.ext_bite === 'Y' && patientStore.type_prophylaxis === 'PRE-EXPOSURE') {
                    compiledDiagnosis = `Pre-exposure, Day- ${patientStore.progressionDay} anti rabies vaccine`;

                    //findings
                    const tallyFindings = ref('');
                    if (patientStore.details.followUp.finding === 'WITH FINDINGS') {
                        tallyFindings.value = `With Findings: 
                        Wound Description: ${patientStore.details.followUp.wound_description}
                        (${patientStore.details.followUp.erythema})Erythema 
                        (${patientStore.details.followUp.tenderness})Tenderness
                        (${patientStore.details.followUp.hematoma})Hematoma 
                        (${patientStore.details.followUp.discharge})Discharge/Bleeding ${patientStore.details.followUp.discharge_sp}`;
                        patientStore.header.doctor_objective = tallyFindings.value;
                    } else if (patientStore.details.followUp.finding === 'ESSENTIALLY NORMAL PE FINDING') {
                        patientStore.header.doctor_objective = 'Essentially normal physical examination finding';
                    }

                    const tally = {
                        'Previous Completed ARV': patientStore.details.ExternalCauseOfInjury.previousARV === 'YES' ? 'Yes' : 'No',
                        'Date of Previous ARV': patientStore.details.ExternalCauseOfInjury.arvDate,
                        'Previous Anti-Tetanus Vaccination': patientStore.details.ExternalCauseOfInjury.tetanusVaccination,
                        'Number of Doses Given': patientStore.details.ExternalCauseOfInjury.tetanusDoses,
                        'Last Dose Given': patientStore.details.ExternalCauseOfInjury.lastTetanusDose,
                        Allergies: patientStore.details.ExternalCauseOfInjury.allergies || 'None',
                        'Adverse Reactions': patientStore.details.ExternalCauseOfInjury.adverseReaction || 'None',
                        'Additional Details': patientStore.details.ExternalCauseOfInjury.bite_more_details || 'None'
                    };

                    const filteredTally = Object.fromEntries(
                        Object.entries(tally).filter(([key, value]) => {
                            return value !== undefined && value !== null && value !== '' && value !== 'Invalid date';
                        })
                    );

                    const testDetails = Object.keys(filteredTally)
                        .map((label) => `${label}: ${filteredTally[label]}`)
                        .join('\n');
                    patientStore.header.doctor_details = testDetails;
                }

                //Management/Plan
                if (patientStore.progressionDay !== '' || undefined || null) {
                    //Primary Regimen - Pre Exposure
                    const { tt, pvrv } = patientStore.details.ABTC;

                    const createDoctorPlan = (day) => {
                        let doctorPlan = `PrEP Day-${day} `;

                        if (tt === 'Y' && pvrv === 'Y') {
                            doctorPlan += `ARV 0.1 ML X ID 2 SITES.\nTT 0.5 ML IM.`;
                        } else if (pvrv === 'Y') {
                            doctorPlan += `ARV 0.1 ML X ID 2 SITES.`;
                        } else if (tt === 'Y') {
                            doctorPlan += `TT 0.5 ML IM.`;
                        }
                        // else {
                        //     doctorPlan += 'ARV 0.1 ML X ID 2 SITES.\nTT 0.5 ML IM.';
                        // }
                        if (patientStore.details.ABTC.medication !== '') {
                            doctorPlan += `Continue ${patientStore.details.ABTC.medication}.`;
                        }
                        if (patientStore.details.ABTC.skintest === '+') {
                            doctorPlan += 'ERIG not given due to positive skin test, advised HRIG.';
                        }
                        doctorPlan += '\nNon-pharmacologic management: Advised on succeeding follow up and foods to avoid.\n Advised';
                        return doctorPlan;
                    };
                    if (patientStore.type_prophylaxis === 'PRE-EXPOSURE') {
                        if (['0', '7', '21'].includes(patientStore.progressionDay) && patientStore.details.ABTC.immunization_schedule === 'PRIMARY REGIMEN') {
                            patientStore.doctor_plan = createDoctorPlan(patientStore.progressionDay);
                        }

                        //Booster - Pre Exposure
                        if (patientStore.progressionDay === '0' && patientStore.details.ABTC.immunization_schedule === 'BOOSTER') {
                            patientStore.doctor_plan = 'Day 0: Administer the booster for pre-exposure prophylaxis. \nARV 0.1 ML X ID 1 SITE.\nTT 0.5 ML IM.\nNon-pharmacologic management: Advised on succeeding follow up and foods to avoid.\nAdvised';
                        }
                    }

                    //Primary Regimen - Post Exposure
                    const createPostExposurePlan = (day, isBooster = false, boosterRegimen = null, ats_num = '', erig_num = '', bitingStatus) => {
                        let plan = `PEP Day-${day} `;

                        if (isBooster) {
                            plan += `ARV BOOSTER 0.1 ML X ID ${boosterRegimen === '1' ? '4' : '1'} SITES.\nTT 0.5 ML IM.\n`;
                        } else {
                            plan += 'ARV 0.1 ML X ID 2 SITES.\n';

                            if (patientStore.details.ABTC.ats === 'Y') {
                                plan += `□ ATS ${ats_num} IU IM ANST\n`;
                            }
                            if (patientStore.details.ABTC.tt === 'Y') {
                                plan += `□ TT 0.5 ML IM\n`;
                            }
                            if (patientStore.details.ABTC.erig_num !== '') {
                                plan += `□ ERIG ${erig_num} ML INFILTRATE TO AFFECTED AREA, EXCESS GIVEN DEEP IM, AFTER NEGATIVE SKIN TEST\n`;
                            }
                        }
                        if (patientStore.details.ABTC.medication !== '') {
                            plan += `Continue ${patientStore.details.ABTC.medication}.`;
                        }

                        if (patientStore.details.ABTC.skintest === '+') {
                            plan += 'ERIG not given due to positive skin test, advised HRIG.';
                        }
                        // Non-pharmacologic management
                        plan += 'NON-PHARMACOLOGIC MANAGEMENT: DAILY WOUND CARE\n';
                        if (bitingStatus !== 'DIED') {
                            plan += 'ADVISED TO OBSERVE BITING ANIMAL AND TO BRING FOR TESTING IF THE ANIMAL DIES WITHIN THE OBSERVATION PERIOD\n';
                        }
                        plan += 'ADVISED ON SUCCEEDING FOLLOW UP AND FOODS TO AVOID\nADVISED';

                        return plan;
                    };

                    const { progressionDay, details, type_prophylaxis } = patientStore;

                    // Extracting ATS and ERIG values
                    const ats_num = details.ABTC.ats_num || '';
                    const erig_num = details.ABTC.erig_num || '';
                    const bitingStatus = details.followUp.biting;

                    if (type_prophylaxis === 'POST-EXPOSURE' && details.ABTC.immunization_schedule === 'PRIMARY REGIMEN') {
                        if (progressionDay === '0') {
                            patientStore.doctor_plan = createPostExposurePlan('0', false, null, ats_num, erig_num, bitingStatus);
                        } else if (progressionDay === '3') {
                            patientStore.doctor_plan = createPostExposurePlan('3', false, null, ats_num, erig_num, bitingStatus);
                        } else if (progressionDay === '7') {
                            patientStore.doctor_plan = createPostExposurePlan('7', false, null, ats_num, erig_num, bitingStatus);
                        } else if (progressionDay === '28' || progressionDay === '30') {
                            patientStore.doctor_plan = 'Day 28/30: ARV 0.1 ML X ID 2 SITES.\nADVISED ON FOODS TO AVOID.';
                        }
                    } else if (type_prophylaxis === 'POST-EXPOSURE' && details.ABTC.immunization_schedule === 'BOOSTER') {
                        if (details.ABTC.booster_regimen === '1') {
                            patientStore.doctor_plan = createPostExposurePlan('1', true, '1-Day Regimen', ats_num, '', bitingStatus);
                        } else if (details.ABTC.booster_regimen === '2') {
                            if (progressionDay === '0') {
                                patientStore.doctor_plan = createPostExposurePlan('0', true, '2-Day Regimen', ats_num, '', bitingStatus);
                            } else if (progressionDay === '3') {
                                patientStore.doctor_plan = createPostExposurePlan('3', true, '2-Day Regimen', ats_num, '', bitingStatus);
                            }
                        }
                    }
                }
            } else {
                patientStore.header.compiledDiagnosis = compiledDiagnosis;
                const trimDetails = specifyExternalDetails.join('');
                const extHistory = patientStore.details.ExternalCauseOfInjury.ext_history || '';
                patientStore.header.doctor_details = trimDetails + '\n' + extHistory;
            }

            generatedText.value = ` ${compiledDiagnosis}`;
            patientStore.header.doctor_diagnosis = generatedText.value;
        } catch (e) {
            console.log('Generate Text Error: ', e);
        }
    };
    watch(
        () => patientStore.details.forTransportVehicularAccident.vehicle_type_id,
        (value) => {
            loadVehicles(value);
        }
    );
    watch(
        () => [
            patientStore.details.generalData,
            patientStore.details.followUp,
            patientStore.details.ABTC,
            patientStore.details.preAdmissionData,
            patientStore.details.forTransportVehicularAccident,
            patientStore.details.ExternalCauseOfInjury,
            patientStore.details.natureOfInjury
        ],
        () => {
            generateText();
        },
        { deep: true }
    );

    watch(
        () => patientStore.details.multipleFields,
        () => {
            generateText();
        },
        { deep: true }
    );

    return {
        generateText,
        loadVehicles
    };
}

/***
 import { usePatientStore } from '../store/injury/patientStore';
import { ref, watch } from 'vue';
import { LibraryService } from '../service/LibraryService';

const patientStore = usePatientStore();
const libraryService = new LibraryService();
const vehicleCodes = ref([]);
// const compiledOtherExternal = ref();
// const compiledOtherPhysical = ref();
const generatedText = ref([]);

// Load vehicle types from the library service
const landVehicles = libraryService.getLandVehicles();
const airVehicles = libraryService.getAirVehicles();
const waterVehicles = libraryService.getWaterVehicles();

// Load vehicle types based on vehicle type ID
const loadVehicles = (vehicle_type_id) => {
    const vehicleMap = {
        '01': landVehicles,
        '02': waterVehicles,
        '03': airVehicles
    };
    vehicleCodes.value = vehicleMap[vehicle_type_id] || [];
};

// Generate diagnosis text based on patient details
const generateText = () => {
    try {
        const physicalInjuries = [];
        const externalCauses = [];
        const specifyDetails = [];

        // Helper function to add injuries
        const addInjury = (type, condition, details) => {
            if (condition === 'Y') {
                physicalInjuries.push(type);
                if (details) specifyDetails.push(`${type}: ${details}\n`);
            }
        };

        // Collect physical injuries
        addInjury('Abrasion', patientStore.details.natureOfInjury.noi_abrasion, patientStore.details.natureOfInjury.noi_abradtl);
        addInjury('Burn', patientStore.details.natureOfInjury.noi_burn_r, patientStore.details.natureOfInjury.noi_burndtl);
        addInjury('Avulsion', patientStore.details.natureOfInjury.noi_avulsion, patientStore.details.natureOfInjury.noi_avuldtl);
        addInjury('Laceration', patientStore.details.natureOfInjury.noi_owound, patientStore.details.natureOfInjury.noi_owoudtl);
        addInjury('Incision', patientStore.details.natureOfInjury.noi_incision, patientStore.details.natureOfInjury.noi_incision_sp);
        addInjury('Traumatic Amputation', patientStore.details.natureOfInjury.noi_amp, patientStore.details.natureOfInjury.noi_ampdtl);
        addInjury('Traumatic Brain Injury', patientStore.details.natureOfInjury.noi_brain, patientStore.details.natureOfInjury.noi_braindtl);
        addInjury('Gunshot Wound', patientStore.details.natureOfInjury.noi_gunshot, patientStore.details.natureOfInjury.noi_gunshotdtl);
        addInjury('Stab Wound', patientStore.details.natureOfInjury.noi_stab_wound, patientStore.details.natureOfInjury.noi_stab_wounddtl);
        addInjury('Concussion', patientStore.details.natureOfInjury.noi_concussion, patientStore.details.natureOfInjury.noi_concussiondtl);
        addInjury('Contusion', patientStore.details.natureOfInjury.noi_contusion, patientStore.details.natureOfInjury.noi_contudtl);
        addInjury('Fracture (Closed)', patientStore.details.natureOfInjury.noi_frac_ope, patientStore.details.natureOfInjury.noi_fropdtl);
        addInjury('Fracture (Open)', patientStore.details.natureOfInjury.noi_frac_clo, patientStore.details.natureOfInjury.noi_frcldtl);
        addInjury('Dislocation (Open)', patientStore.details.natureOfInjury.noi_disl_open, patientStore.details.natureOfInjury.noi_disl_open_sp);
        addInjury('Dislocation (Close)', patientStore.details.natureOfInjury.noi_disl_close, patientStore.details.natureOfInjury.noi_disl_close_sp);
        addInjury('Puncture', patientStore.details.natureOfInjury.noi_punc, patientStore.details.natureOfInjury.noi_punc_sp);
        addInjury('Other Injury', patientStore.details.natureOfInjury.noi_others, patientStore.details.natureOfInjury.noi_otherinj);

        // Collect external causes
        const addExternalCause = (type, condition, details) => {
            if (condition === 'Y') {
                externalCauses.push(type);
                if (details) specifyDetails.push(`${type}: ${details}\n`);
            }
        };

        addExternalCause('Bite/Sting', patientStore.details.ExternalCauseOfInjury.ext_bite);
        addExternalCause('Burn', patientStore.details.ExternalCauseOfInjury.ext_burn_r);
        addExternalCause('Chemical Substance', patientStore.details.ExternalCauseOfInjury.ext_chem);
        addExternalCause('Drowning', patientStore.details.ExternalCauseOfInjury.ext_drown_r);
        addExternalCause('Exposure to Forces of Nature', patientStore.details.ExternalCauseOfInjury.ext_expo_nature_r);
        addExternalCause('Fall', patientStore.details.ExternalCauseOfInjury.ext_fall);
        addExternalCause('Firecracker', patientStore.details.ExternalCauseOfInjury.ext_firecracker_r);
        addExternalCause('Foreign Body Ingestion', patientStore.details.ExternalCauseOfInjury.ext_foreign_body);
        addExternalCause('Caustic Ingestion', patientStore.details.ExternalCauseOfInjury.ext_caustic_ingestion);
        addExternalCause('Crushing', patientStore.details.ExternalCauseOfInjury.ext_crushing);
        addExternalCause('Hanging/Strangulation', patientStore.details.ExternalCauseOfInjury.ext_hang);
        addExternalCause('Assault', patientStore.details.ExternalCauseOfInjury.ext_assault);
        addExternalCause('Neglect', patientStore.details.ExternalCauseOfInjury.ext_neglect);
        addExternalCause('Other External Cause', patientStore.details.ExternalCauseOfInjury.ext_other, patientStore.details.ExternalCauseOfInjury.ext_other_sp);

        // Compile diagnosis based on collected data
        const injuryText = physicalInjuries.join(', ');
        const causeText = externalCauses.join(', ');
        const diagSubj = specifyDetails.join('');

        generatedText.value = `${injuryText} secondary to ${causeText}\n${diagSubj}`;
        patientStore.header.doctor_diagnosis = generatedText.value;
    } catch (e) {
        console.error('Generate Text Error: ', e);
    }
};

// Watch for changes in vehicle type ID
watch(
    () => patientStore.details.forTransportVehicularAccident.vehicle_type_id,
    (value) => {
        loadVehicles(value);
    }
);

// Watch for changes in patient details and generate text
watch(
    () => [patientStore.details.generalData, patientStore.details.preAdmissionData, patientStore.details.forTransportVehicularAccident, patientStore.details.ExternalCauseOfInjury, patientStore.details.natureOfInjury],
    () => {
        generateText();
    },
    { deep: true }
);

// Watch for changes in multiple fields
watch(
    () => patientStore.details.multipleFields,
    () => {
        generateText();
    },
    { deep: true }
);

 */
